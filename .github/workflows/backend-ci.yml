name: Python Backend CI Pipeline

on:
  push:
    branches:
      - Development
      - Feature
      - backend-ci-pipeline

jobs:
  backend:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'  # Ensure submodules are initialized and updated

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run flake8 and save the linting results
      - name: Run flake8 and save results
        run: |
          pip install flake8
          flake8 . --exit-zero > flake8_results.txt  # Save the flake8 results to a text file

      # Debug: Check the directory structure
      - name: Debug Directory Structure
        run: |
          pwd  # Show the current working directory
          ls -al  # List all files to check if 'Server' folder exists

      # # Run Python tests with coverage and save reports
      # - name: Run tests with coverage and save results
      #   run: |
      #     pip install -r requirements.txt  # Ensure dependencies are installed
      #     pip install coverage pytest
      #     mkdir -p test_results
      #     export PYTHONPATH=$PYTHONPATH:/home/runner/work/Backend/Backend
      #     # Run tests with coverage and generate reports
      #     coverage run -m pytest --maxfail=5 --disable-warnings --junitxml=test_results/junit_report.xml
      #     coverage report -m
      #     coverage xml  # for code coverage report in XML
      #     coverage html  # for HTML version (optional)

      # Run tests with coverage and generate reports
      - name: Run tests with coverage
        run: |
          pip install -r requirements.txt  # Ensure dependencies are installed
          pip install coverage pytest
          mkdir -p test_results
          export PYTHONPATH=$PYTHONPATH:/home/runner/work/Backend/Backend
          coverage run --rcfile=.coveragerc -m pytest --junitxml=test_results/junit_report.xml
          coverage report -m
          coverage xml -o artifacts/coverage.xml
          coverage html -d artifacts/htmlcov


      # Collect generated files (including flake8 results, test results, and coverage reports)
      - name: Collect generated artifacts
        run: |
          mkdir -p artifacts
          mv flake8_results.txt artifacts/
          mv test_results/junit_report.xml artifacts/
          mv coverage.xml artifacts/
          mv -f htmlcov artifacts/htmlcov || echo "No htmlcov folder to move"

      # Upload build artifacts to GitHub Actions
      - name: Upload build artifacts
        uses: actions/upload-artifact@master
        with:
          name: backend-artifacts
          path: artifacts/*  # Upload everything from the 'artifacts' folder

