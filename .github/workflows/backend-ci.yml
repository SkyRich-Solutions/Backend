name: Python Backend CI Pipeline

on:
  push:
    branches:
      - Development
      - Feature
      - backend-ci-pipeline

jobs:
  backend:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run flake8 and save the linting results
      - name: Run flake8 and save results
        run: |
          pip install flake8
          flake8 . --exit-zero > flake8_results.txt  # Save the flake8 results to a text file

      # Start the server from the root directory
      - name: Start the server
        run: |
          cd Server
          nohup npm run dev &  # Start the server in the background

      # Give the server time to start
      - name: Wait for server to start
        run: |
          sleep 10  # Adjust time as needed for the server to fully start

      # Run backend tests
      - name: Run Python tests
        run: |
          cd Backend  # Ensure we're in the Backend folder
          python -m unittest discover -s test -p "*.py" > test_results/test_report.txt
        
      # Run Python tests and save the results to a text file
      - name: Run Python tests
        run: |
          pip install -r requirements.txt  # Ensure dependencies are installed
          mkdir -p test_results
          python -m unittest discover -s test -p "*.py" > test_results/test_report.txt  # Save the test results to a text file

      # Collect generated files (including flake8 results and test results)
      - name: Collect generated artifacts
        run: |
          mkdir -p artifacts
          # Move the flake8 results and test results to the artifacts folder
          mv flake8_results.txt artifacts/
          mv test_results/test_report.txt artifacts/

      # Upload build artifacts to GitHub Actions
      - name: Upload build artifacts
        uses: actions/upload-artifact@master
        with:
          name: backend-artifacts
          path: artifacts/*  # Upload everything from the 'artifacts' folder

